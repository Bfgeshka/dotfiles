/* See LICENSE file for copyright and license details. */

// #define EXITADDR ~/.dwm/exitdwm.sh

#include <X11/XF86keysym.h>
#define NUMCOLORS 5

/* Colors */
/* Old
#define COLOUR_BG      "#171b1e"
#define COLOUR_FG_MAIN "#a3cad9"
#define COLOUR_FG_DARK "#405b70"
#define COLOUR_WHITE   "#afccde"
#define COLOUR_BLACK   "#171b1e" */

#define COLOUR_BG      "#161712"
#define COLOUR_FG_MAIN "#c7c4b1"
#define COLOUR_FG_DARK "#383b35"
#define COLOUR_WHITE   "#e2e1cf"
#define COLOUR_BLACK   "#161712"

static const char colors[NUMCOLORS][MAXCOLORS][8] =
{//	  border          foreground      background
	{ COLOUR_BLACK,   COLOUR_FG_MAIN, COLOUR_BLACK },   // 0 = normal
	{ COLOUR_FG_DARK, COLOUR_WHITE,   COLOUR_FG_DARK }, // 1 = selected
	{ "#9A2601",      "#ffffff",      "#9A2601" },      // 2 = urgent/warning
	{ "#ff0000",      "#8f0000",      "#ff0000" },      // 3 = error
	{ COLOUR_FG_MAIN, COLOUR_FG_MAIN, COLOUR_BG },      // 4 = inverted normal
//	add more here
};

static const char *fonts[] =
{
	"Tewi:size=7",
	"Terminus:size=7"
};

static const char dmenufont[] = "-lucy-tewi-medium-r-normal--11-90-75-75-p-58-iso10646-1";

static const Bool showbar              = 1;     /* False means no bar */
static const Bool topbar               = 1;     /* False means bottom bar */
static const Bool transbar             = True;
static const unsigned int borderpx     = 0;     /* border pixel of windows */
static const unsigned int marginbottom = 12;    /* Margin at the bottom for another bar */
static const unsigned int snap         = 32;    /* snap pixel */

/* tagging */
//static const char *tags[] = { "α", "β", "δ", "μ", "π", "σ", "τ", "Σ", "Θ", "Ω",};
  static const char *tags[] = { "⍊", "", "␥", "⌭", "♪", "Ⅰ", "Ⅱ", "Ⅲ", "Ⅳ", "Ⅴ", "Ⅵ", "Ⅶ",};

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Gimp",           NULL,        NULL,  0,      True,  -1 },
	{ "Geany",     	    NULL,        NULL,  1 << 1, False, -1 },
	{ "mpv",            NULL,        NULL,  0,      True,  -1 },
	{ "Deadbeef",       NULL,        NULL,  1 << 4, False, -1 },
	{ "Lxappearance",   NULL,        NULL,  0,      True,  -1 },
	{ "toribash_steam",	NULL,        NULL,  0,      True,  -1 },
	{ NULL,	            "Navigator", NULL,  1 << 3, False, -1 },
	{ "Navigator",      "Navigator", NULL,  1 << 3, False, -1 },
	{ "Spacefm",        NULL,        NULL,  1 << 2, False, -1 },
};

/* layout(s) */
static const float mfact      = 0.55;  /* factor of master area size [0.05..0.95] */
static const int nmaster      = 1;     /* number of clients in master area */
static const Bool resizehints = False; /* True means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[⬜]",      monocle },
	{ "[⬚]",      NULL },
	{ "[]",      tile },
};

/* key definitions */
#define MODKEY Mod4Mask

#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,  view,        {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,  toggleview,  {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,  tag,         {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,  toggletag,   {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
// static const char *exitdwm[] = {"EXITADDR", NULL};
static char dmenumon[2] = "0";
static const char *barhide[] = {"transset", "-n", "bar", "-t", "-x", "0", NULL};
static const char *brightnessminus[] = {"xbacklight", "-dec", "10", NULL};
static const char *brightnessplus[] = {"xbacklight", "-inc", "10", NULL};
static const char *dmcust[] = {"sh", "/home/bfg/.config/dwm/dmenu_most_used", NULL };
static const char *dmenucmd[] = { "dmenu_run", "-nb", COLOUR_WHITE, "-nf", COLOUR_BLACK, "-sb", COLOUR_BLACK, "-sf", COLOUR_WHITE, NULL };
static const char *execddb[] = {"deadbeef", NULL };
static const char *execpalemoon[] = {"palemoon", NULL };
static const char *scrot[] = {"scrot", NULL };
static const char *termcmd[]  = { "st", "-e", "abduco", "-c", "abdc", "dvtm-wrap", NULL };
static const char *termcmdabd[]  = { "st", "-e", "abduco", "-a", "abdc", "dvtm-wrap", NULL };
static const char *voldn[] = { "amixer", "-c", "0", "set", "Master", "2dB-", NULL };
static const char *volmt[] = { "amixer", "-c", "0", "set", "Master", "toggle", NULL };
static const char *volup[] = { "amixer", "-c", "0", "set", "Master", "2dB+", NULL };
static const char *xlock[] = { "xlock", "-mode", "xjack", NULL};
static const char *calendar[] = { "mksh", "/home/bfg/.config/dwm/cal.sh", NULL };

static Key keys[] = {
	TAGKEYS(                XK_1,                      0)
	TAGKEYS(                XK_2,                      1)
	TAGKEYS(                XK_3,                      2)
	TAGKEYS(                XK_4,                      3)
	TAGKEYS(                XK_5,                      4)
	TAGKEYS(                XK_6,                      5)
	TAGKEYS(                XK_7,                      6)
	TAGKEYS(                XK_8,                      7)
	TAGKEYS(                XK_9,                      8)

	/* modifier             key                      function        argument */
	{ MODKEY,               XK_Print,                spawn,          {.v = scrot } },
	{ MODKEY,               XK_0,                    view,           {.ui = ~0 } },
	{ MODKEY,               XK_b,                    spawn,          {.v = barhide } },
	{ MODKEY,               XK_b,                    togglebar,      {0} },
	{ MODKEY,               XK_comma,                focusmon,       {.i = -1 } },
	{ MODKEY,               XK_d,                    incnmaster,     {.i = -1 } },
	{ MODKEY,               XK_f,                    setlayout,      {.v = &layouts[1]} },
	{ MODKEY,               XK_h,                    setmfact,       {.f = -0.05} },
	{ MODKEY,               XK_i,                    incnmaster,     {.i = +1 } },
	{ MODKEY,               XK_j,                    focusstack,     {.i = +1 } },
	{ MODKEY,               XK_k,                    focusstack,     {.i = -1 } },
	{ MODKEY,               XK_l,                    setmfact,       {.f = +0.05} },
	{ MODKEY,               XK_m,                    setlayout,      {.v = &layouts[0]} },
	{ MODKEY,               XK_period,               focusmon,       {.i = +1 } },
	{ MODKEY,               XK_Return,               zoom,           {0} },
	{ MODKEY,               XK_space,                setlayout,      {0} },
	{ MODKEY,               XK_t,                    setlayout,      {.v = &layouts[2]} },
	{ MODKEY,               XK_x,                    spawn,          {.v = dmcust } },
	{ MODKEY,               XK_z,                    spawn,          {.v = dmenucmd } },
	{ MODKEY|ControlMask,   XK_l,                    spawn,          {.v = xlock } },
	{ MODKEY|ControlMask,   XK_d,                    spawn,          {.v = execddb } },
	{ MODKEY|ControlMask,   XK_Down,                 spawn,          {.v = brightnessminus } },
	{ MODKEY|ControlMask,   XK_f,                    spawn,          {.v = execpalemoon } },
	{ MODKEY|ControlMask,   XK_Up,                   spawn,          {.v = brightnessplus } },
	{ MODKEY|ShiftMask,     XK_0,                    tag,            {.ui = ~0 } },
	{ MODKEY|ShiftMask,     XK_comma,                tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,     XK_e,                    quit,           {0} },
	{ MODKEY|ShiftMask,     XK_period,               tagmon,         {.i = +1 } },
	{ MODKEY|ShiftMask,     XK_q,                    killclient,     {0} },
	{ MODKEY|ShiftMask,     XK_Return,               spawn,          {.v = termcmd } },
	{ MODKEY|ShiftMask,     XK_space,                togglefloating, {0} },
	{ MODKEY|ShiftMask,     XK_z,                    focusmon,       {.i = -1 } },
	{ MODKEY,               XK_Up,                   incnmaster,     {.i = +1 } },
	{ MODKEY,               XK_Down,                 incnmaster,     {.i = -1 } },
	{ MODKEY,               XK_Left,                 setmfact,       {.f = -0.025} },
	{ MODKEY,               XK_Right,                setmfact,       {.f = +0.025} },
	{ MODKEY,               XK_Tab,                  focusstack,     {.i = +1 } },
	{ 0,                    XF86XK_AudioRaiseVolume, spawn, {.v = volup } },
	{ 0,                    XF86XK_AudioLowerVolume, spawn, {.v = voldn } },
	{ 0,                    XF86XK_AudioMute,        spawn, {.v = volmt } },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkStatusText,        MODKEY,         Button2,        spawn,          {.v = termcmdabd } },
	{ ClkStatusText,        0,              Button1,        spawn,          {.v = calendar } },
//	{ ClkStatusText,        0,              Button2,        spawn,          {.v = dmcust } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

